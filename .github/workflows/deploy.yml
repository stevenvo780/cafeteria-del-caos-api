name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  REPO_NAME: cafeteriadelcaos
  SERVICE_NAME: cafeteria-del-caos-api
  IMAGE_NAME: cafeteria-del-caos-api

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Ensure Artifact Registry Repository Exists
        run: |
          REGION="${{ secrets.GCP_REGION }}"
          PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          
          REPO_EXISTS=$(gcloud artifacts repositories list \
            --filter="name ~ '${REPO_NAME}' AND location:'${REGION}'" \
            --format="value(name)")

          if [ -z "$REPO_EXISTS" ]; then
            gcloud artifacts repositories create $REPO_NAME \
              --repository-format=docker \
              --location=$REGION \
              --description="Docker repository for my project"
          else
            echo "Artifact Registry repository $REPO_NAME already exists."
          fi

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          IMAGE_PATH=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest
          docker build -t $IMAGE_PATH .

      - name: Push Docker image to Artifact Registry
        run: docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest \
            --region ${{ secrets.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --timeout=300
